・PHPについて
→1994年に誕生
→サーバーサイドのスクリプト言語
→データベース(MySQLなど)との連携が容易
→HTMLファイルの中に記述できる
→PHPのシェアは全ウェブサイトの79.2%(2022年時点)
→動的なコンテンツの作成・開発に向いている

・PHPの拡張子について
→.php

・コメントの書き方について
1行コメントアウト：// (内容)
複数行コメントアウト：/* (内容) */

・基本文法について
→ <?php (スクリプト) ?>
→スクリプトの区切りにはセミコロン(;)付ける

(変数)
$(変数名) = (代入値)

※代入値の種類について
論理値(boolean)：trueもしくはfalse(0,0.0,NULLなども)
整数(integer)：-2,147,483,645 ～ 2,147,483,645
浮動小数点数(float)：14桁の数値を扱える
文字列(string)：''もしくは""で囲む

(定数)
define("定数名", "値");

(配列・連想配列)

＄test = ["a", "b", "c"];
→配列の宣言・初期化

$test = ["A" => "a", "B" => 1, 10 => "c"];
→連想配列
→→キーとバリューの型の制限はなし

(演算子)
代数演算子：+, -, *, /
比較演算子：>, >=, <, <=, ==, ===, !=, !==

※==(!=)と===(!==)の違いについて
==：両辺の値が等しければtrue
===：両辺の値とデータ型が等しければtrue
→基本的には===を使用する

(制御文)

・if文
if(条件式){
} else if (条件式){
} else {
}

・switch文
switch(式){
	case 1 :
		break;
	case 'b' :
		break;
	default :
		(どのcaseにも合致しなかった場合の処理)
		break;
}

・(do)while文
while(条件式){
}

do{
} while(条件式)
→読みにくいため非推奨

・for文
for($i = 0; $i < 2; $i++){
}

・foreach文
→配列の場合
$alphabets = ["a", "b", "c"];
foreach($alphabets as $alphabet){
	echo $alphabet . PHP_EOL;
}

→連想配列の場合
$lower_alphabets = ["A" => "a", "B" => "b", "C" => "c"];
foreach($alphabets as $key => $value){
	echo $key . "の小文字は" $value . PHP_EOL;
}

(breakとcontinue)
break：現在のループを強制中断
continue：現在のループ処理をスキップ(中断はされない)

(関数)
function ft_double(int $num): int(←戻り値の型) {
	$result = $num * 2;
	return $result;
}

$result_double = ft_double(3);

(クラスとインスタンス)

・オブジェクト指向
クラス：データと処理をひとつにまとめる機能
プロパティ：オブジェクトが持っているデータ
メソッド：オブジェクトが持っている処理(クラスの中で定義された関数)
インスタンス：クラスから実体を生成したもの

(クラスの定義)
class Human {
	public $name = "human";
	public $age = 20;
	public function walk(){
	}
	public function run(){
	}
}

・アクセス修飾子について
public：クラス内、クラス外のどこからでもアクセス可能
private：同じクラス内からのみアクセス可能
protected：同じクラス、および子クラスからアクセス可能

(インスタンス化)
$インスタンス名 = new クラス名;
$human_A = new Human;

(プロパティ・関数の使用)
$インスタンス名->プロパティ名・関数名()

echo $human_A->age //20と出力
$human_A->age = 25 //ageの変更
$human_A->walk(); //walk関数の呼び出し

(継承)
→元の雛形クラスをベースとして新たな雛形クラスを作成
→→ポリモーフィズム

class Super_Human(新しいクラス名) extends Human(ベースとなるクラス名) {
	//プロパティ
	//メソッド
}

・オブジェクト指向の三原則
継承：共通点のあるプログラムを1つにまとめて、コードを再利用しやすくする仕組み
カプセル化：他のプログラムからできるだけ変更できない仕組み
ポリモーフィズム：継承したコードの一部を変更して利用するための仕組み