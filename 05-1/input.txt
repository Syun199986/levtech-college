・フレームワーク・ライブラリとは、両者の違いについて
フレームワーク：開発のための枠組みやテンプレート(雛形)を提供するもの
ライブラリ：開発のための機能や部品を再利用できるように集めたもの
→フレームワークはテンプレートをベースに必要な機能を追加して開発を進めていくのに対し、ライブラリは様々な機能の中から必要なものを選択して開発を進めていく
→→開発の自由度に違いがある

・Laravel・CakePHP・Symfonyについて
Laravel：手軽で扱いやすく、PHPフレームワークの中で代表的
CakePHP：Railsの概念を踏襲しており、Railsの良い部分をPHPで実現したフレームワーク
Symphony：特徴として、「バンドル」という概念があること、幅広いOSやDBに対応していること、プラグインによる機能追加ができることなど

・LaravelのComposerについて
→PHPの依存管理ツール(パッケージ・ライブラリ管理ツール)
→→プロジェクトが必要とするライブラリやパッケージを管理し、それをもとにインストールする機能

・composer.jsonファイル、conposer.lockファイルについて
→Composerがライブラリやパッケージを管理しているファイル

composer.jsonにプロジェクトに必要なパッケージとそのバージョンを記述
↓
composer installを実行するとこれを元にパッケージをDL
この時、DLしたパッケージとバージョンがcomposer.lockに書き込まれる
↓
これ以後、composer install実行時にはcomposer.lockがあるため、最初にcomposer installを実行したバージョンと同じバージョンでパッケージをDLする
↓
パッケージを更新する際はcomposer.jsonを更新し、composer updateを実行する
この際、DLしたパッケージとバージョンが新たにcomposer.lockに書き込まれる

・Composerコマンドでの実行コマンドについて
composer init：composer.jsonファイルの新規作成
composer require (パッケージ名)：composer.jsonファイルへのインストール対象ライブラリ情報追加
composer install：composer.jsonファイルに定義されているライブラリのインストール実行
composer update：インストール済みライブラリのアップデート実行

・artisanコマンドについて
→Laravelに搭載されたCLI(コマンドラインインターフェース)
→ファイルの作成や設定ファイルのキャッシュ、データベースの操作といった様々な機能が含まれている